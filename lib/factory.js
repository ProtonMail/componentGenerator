const fs = require('fs');
const gulp = require('gulp');
const gutil = require('gulp-util');
const tap = require('gulp-tap');
const rename = require('gulp-rename');
const log = require('./log');
const { isFileCreated } = require('./tools');
const fileBuilderConfig = require('./fileBuilderConfig');

/**
 * Build a component based on a configuration generated by the service
 * fileBuilderConfig
 * @param  {Array} options.transformations Transformations for the body of the component
 * @param  {String} options.source          Input file
 * @param  {String} options.dest            Output file
 * @param  {String} options.fileName        FileName
 * @return {void}
 */
const buildComponent = ({ transformations, source, dest, fileName, body, full }) => {
    // if (!source) {
    //     !fs.existsSync(dest) && fs.mkdirSync(dest);
    //     fs.writeFileSync(full, body);
    //     return log.success(`Component ${fileName} available ~ ${dest}`);
    // }
    // gulp
    //     .src(source) // Load template to parse
    //     .pipe(
    //         tap((file) => {
    //             // Bind informations into the body of the template
    //             const content = file.contents.toString();
    //             const str = transformations.reduce((acc, pipe) => (acc = pipe(acc)), content);
    //             file.contents = new Buffer(str);
    //             return file;
    //         })
    //     )
    //     .pipe(rename(fileName))
    //     .pipe(gulp.dest(dest))
    //     .on('end', () => {
    //         log.success(`Component ${fileName} available ~ ${dest}`);
    //     });
};

/**
 * Create components
 *  - If no module for the component, creates a new one
 *  - Inject into the module the dependency
 * Ex env:
 *   {
 *      "component": "dew",
 *      "type": "directive",
 *      "module": "test",
 *      "options": {
 *        "hasCtrl": false,
 *        "hasCSS": true
 *      }
 *    }
 * @param  {Object} env Configuration for a module
 * @return {void}
 */
const create = (env) => {
    if (isFileCreated(env)) {
        log.error('This component already exists.', JSON.stringify(env, null, 2));
    }

    fileBuilderConfig.list(env).forEach(buildComponent);
};

module.exports = { create };
